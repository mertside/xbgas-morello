#
# BSD Make Compatible Makefile for xBGAS TTU Memory Safety Tests
#

# Basic Configuration
CC = cc
CFLAGS = -g -O2 -Wall -Wextra -std=c99 -I../../runtime
LDFLAGS = -lpthread -lm
COMPILE = $(CC) $(CFLAGS) $(LDFLAGS)

# Output Directory
REPORTDIR = ./reports

# Test Sources
SPATIAL_SOURCES = ttu_s1_free_not_at_start_refactored.c ttu_s2_free_not_on_heap_refactored.c ttu_s3_null_ptr_dereference_refactored.c ttu_s4_oob_read_refactored.c ttu_s5_oob_write_refactored.c
TEMPORAL_SOURCES = ttu_t1_double_free_refactored.c ttu_t2_hm_fake_chunk_malloc_refactored.c ttu_t3_hm_house_of_spirit_refactored.c ttu_t4_hm_p_and_c_chunk_refactored.c ttu_t5_use_after_free_refactored.c ttu_t6_uaf_function_pointer_refactored_fixed.c ttu_t7_uaf_memcpy_refactored.c
REALWORLD_SOURCES = ttu_r1_HeartBleed_refactored.c ttu_r2_dop_refactored.c ttu_r3_uaf_to_code_reuse_refactored.c ttu_r4_illegal_ptr_deref_refactored.c ttu_r5_df_switch_refactored.c
HEAP_SOURCES = ttu_t2_hm_fake_chunk_malloc_refactored.c ttu_t3_hm_house_of_spirit_refactored.c ttu_t4_hm_p_and_c_chunk_refactored.c

# ============================================================================
#                              BUILD TARGETS
# ============================================================================

all: spatial temporal realworld
	@echo "===================================================="
	@echo "All TTU refactored tests built successfully!"
	@echo "===================================================="

spatial: directories
	@echo "Building spatial safety tests..."
	@for src in $(SPATIAL_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Building $$target from $$src..."; \
		if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
			echo "✓ Built $$target"; \
		else \
			echo "✗ Failed to build $$target"; \
			cat $(REPORTDIR)/build_$$target.log; \
			exit 1; \
		fi; \
	done

temporal: directories
	@echo "Building temporal safety tests..."
	@for src in $(TEMPORAL_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Building $$target from $$src..."; \
		if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
			echo "✓ Built $$target"; \
		else \
			echo "✗ Failed to build $$target"; \
			cat $(REPORTDIR)/build_$$target.log; \
			exit 1; \
		fi; \
	done

realworld: directories
	@echo "Building real-world vulnerability tests..."
	@for src in $(REALWORLD_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Building $$target from $$src..."; \
		if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
			echo "✓ Built $$target"; \
		else \
			echo "✗ Failed to build $$target"; \
			cat $(REPORTDIR)/build_$$target.log; \
			exit 1; \
		fi; \
	done

heap: directories
	@echo "Building heap manipulation tests..."
	@for src in $(HEAP_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Building $$target from $$src..."; \
		if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
			echo "✓ Built $$target"; \
		else \
			echo "✗ Failed to build $$target"; \
			cat $(REPORTDIR)/build_$$target.log; \
			exit 1; \
		fi; \
	done

directories:
	@mkdir -p $(REPORTDIR)

# ============================================================================
#                           INDIVIDUAL TARGETS
# ============================================================================

# Individual test targets
ttu_s1_free_not_at_start_refactored: directories
	@$(COMPILE) -o ttu_s1_free_not_at_start_refactored.exe ttu_s1_free_not_at_start_refactored.c

ttu_s2_free_not_on_heap_refactored: directories
	@$(COMPILE) -o ttu_s2_free_not_on_heap_refactored.exe ttu_s2_free_not_on_heap_refactored.c

ttu_s3_null_ptr_dereference_refactored: directories
	@$(COMPILE) -o ttu_s3_null_ptr_dereference_refactored.exe ttu_s3_null_ptr_dereference_refactored.c

ttu_s4_oob_read_refactored: directories
	@$(COMPILE) -o ttu_s4_oob_read_refactored.exe ttu_s4_oob_read_refactored.c

ttu_s5_oob_write_refactored: directories
	@$(COMPILE) -o ttu_s5_oob_write_refactored.exe ttu_s5_oob_write_refactored.c

ttu_t1_double_free_refactored: directories
	@$(COMPILE) -o ttu_t1_double_free_refactored.exe ttu_t1_double_free_refactored.c

ttu_t2_hm_fake_chunk_malloc_refactored: directories
	@$(COMPILE) -o ttu_t2_hm_fake_chunk_malloc_refactored.exe ttu_t2_hm_fake_chunk_malloc_refactored.c

ttu_t3_hm_house_of_spirit_refactored: directories
	@$(COMPILE) -o ttu_t3_hm_house_of_spirit_refactored.exe ttu_t3_hm_house_of_spirit_refactored.c

ttu_t4_hm_p_and_c_chunk_refactored: directories
	@$(COMPILE) -o ttu_t4_hm_p_and_c_chunk_refactored.exe ttu_t4_hm_p_and_c_chunk_refactored.c

ttu_t5_use_after_free_refactored: directories
	@$(COMPILE) -o ttu_t5_use_after_free_refactored.exe ttu_t5_use_after_free_refactored.c

ttu_t6_uaf_function_pointer_refactored_fixed: directories
	@$(COMPILE) -o ttu_t6_uaf_function_pointer_refactored_fixed.exe ttu_t6_uaf_function_pointer_refactored_fixed.c

ttu_t7_uaf_memcpy_refactored: directories
	@$(COMPILE) -o ttu_t7_uaf_memcpy_refactored.exe ttu_t7_uaf_memcpy_refactored.c

ttu_r1_HeartBleed_refactored: directories
	@$(COMPILE) -o ttu_r1_HeartBleed_refactored.exe ttu_r1_HeartBleed_refactored.c

ttu_r2_dop_refactored: directories
	@$(COMPILE) -o ttu_r2_dop_refactored.exe ttu_r2_dop_refactored.c

ttu_r3_uaf_to_code_reuse_refactored: directories
	@$(COMPILE) -o ttu_r3_uaf_to_code_reuse_refactored.exe ttu_r3_uaf_to_code_reuse_refactored.c

ttu_r4_illegal_ptr_deref_refactored: directories
	@$(COMPILE) -o ttu_r4_illegal_ptr_deref_refactored.exe ttu_r4_illegal_ptr_deref_refactored.c

ttu_r5_df_switch_refactored: directories
	@$(COMPILE) -o ttu_r5_df_switch_refactored.exe ttu_r5_df_switch_refactored.c

# ============================================================================
#                              TEST EXECUTION
# ============================================================================

test-spatial: spatial
	@echo "Running spatial safety tests..."
	@for src in $(SPATIAL_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Running $$target..."; \
		timeout 30s ./$$target > $(REPORTDIR)/$$target.output 2>&1 && \
			echo "✓ PASSED: $$target" || echo "✗ FAILED: $$target"; \
	done

test-temporal: temporal
	@echo "Running temporal safety tests..."
	@for src in $(TEMPORAL_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Running $$target..."; \
		timeout 30s ./$$target > $(REPORTDIR)/$$target.output 2>&1 && \
			echo "✓ PASSED: $$target" || echo "✗ FAILED: $$target"; \
	done

test-realworld: realworld
	@echo "Running real-world vulnerability tests..."
	@for src in $(REALWORLD_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Running $$target..."; \
		timeout 30s ./$$target > $(REPORTDIR)/$$target.output 2>&1 && \
			echo "✓ PASSED: $$target" || echo "✗ FAILED: $$target"; \
	done

test-heap: heap
	@echo "Running heap manipulation tests..."
	@for src in $(HEAP_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Running $$target..."; \
		timeout 30s ./$$target > $(REPORTDIR)/$$target.output 2>&1 && \
			echo "✓ PASSED: $$target" || echo "✗ FAILED: $$target"; \
	done

test-all: all
	@echo "========================================================="
	@echo "Running comprehensive TTU security test suite"
	@echo "========================================================="
	@$(MAKE) test-spatial
	@$(MAKE) test-temporal
	@$(MAKE) test-realworld

# ============================================================================
#                              VALIDATION
# ============================================================================

compile-all: directories
	@echo "Compiling all tests without execution..."
	@all_sources="$(SPATIAL_SOURCES) $(TEMPORAL_SOURCES) $(REALWORLD_SOURCES)"; \
	for src in $$all_sources; do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		echo "Compiling $$src..."; \
		if $(COMPILE) -o $$target $$src > $(REPORTDIR)/compile_$$target.log 2>&1; then \
			echo "✓ $$src compiles"; \
		else \
			echo "✗ $$src failed"; \
			cat $(REPORTDIR)/compile_$$target.log; \
		fi; \
	done

validate: compile-all
	@echo "Validation complete"

syntax-check:
	@echo "Checking syntax of all sources..."
	@all_sources="$(SPATIAL_SOURCES) $(TEMPORAL_SOURCES) $(REALWORLD_SOURCES)"; \
	for src in $$all_sources; do \
		if $(CC) $(CFLAGS) -fsyntax-only $$src 2>/dev/null; then \
			echo "✓ $$src syntax OK"; \
		else \
			echo "✗ $$src syntax errors"; \
		fi; \
	done

# ============================================================================
#                              MAINTENANCE
# ============================================================================

clean:
	@echo "Cleaning generated files..."
	@rm -f *.exe *.o *.core
	@rm -rf $(REPORTDIR)

clean-reports:
	@rm -rf $(REPORTDIR)
	@mkdir -p $(REPORTDIR)

# ============================================================================
#                                 HELP
# ============================================================================

config:
	@echo "Build Configuration:"
	@echo "CC = $(CC)"
	@echo "CFLAGS = $(CFLAGS)"
	@echo "LDFLAGS = $(LDFLAGS)"
	@echo "REPORTDIR = $(REPORTDIR)"

help:
	@echo "TTU Memory Safety Tests - Build System"
	@echo "======================================"
	@echo "BUILD TARGETS:"
	@echo "  all        - Build all refactored tests"
	@echo "  spatial    - Build spatial safety tests (5)"
	@echo "  temporal   - Build temporal safety tests (7)"
	@echo "  realworld  - Build real-world tests (5)"
	@echo "  heap       - Build heap manipulation tests (3)"
	@echo ""
	@echo "INDIVIDUAL TARGETS:"
	@echo "  ttu_s1_free_not_at_start_refactored"
	@echo "  ttu_t1_double_free_refactored"
	@echo "  ttu_r1_HeartBleed_refactored"
	@echo "  ... (and others)"
	@echo ""
	@echo "TEST TARGETS:"
	@echo "  test-all      - Run all tests"
	@echo "  test-spatial  - Run spatial tests"
	@echo "  test-temporal - Run temporal tests"
	@echo "  test-realworld- Run real-world tests"
	@echo "  test-heap     - Run heap tests"
	@echo ""
	@echo "VALIDATION:"
	@echo "  compile-all   - Compile all without running"
	@echo "  validate      - Validate all builds"
	@echo "  syntax-check  - Check source syntax"
	@echo ""
	@echo "MAINTENANCE:"
	@echo "  clean         - Remove generated files"
	@echo "  config        - Show build configuration"
	@echo "  help          - Show this help"

# Mark all targets as PHONY that don't create files
.PHONY: all spatial temporal realworld heap directories
.PHONY: test-spatial test-temporal test-realworld test-heap test-all
.PHONY: compile-all validate syntax-check clean clean-reports config help
.PHONY: ttu_s1_free_not_at_start_refactored ttu_s2_free_not_on_heap_refactored
.PHONY: ttu_s3_null_ptr_dereference_refactored ttu_s4_oob_read_refactored
.PHONY: ttu_s5_oob_write_refactored ttu_t1_double_free_refactored
.PHONY: ttu_t2_hm_fake_chunk_malloc_refactored ttu_t3_hm_house_of_spirit_refactored
.PHONY: ttu_t4_hm_p_and_c_chunk_refactored ttu_t5_use_after_free_refactored
.PHONY: ttu_t6_uaf_function_pointer_refactored_fixed ttu_t7_uaf_memcpy_refactored
.PHONY: ttu_r1_HeartBleed_refactored ttu_r2_dop_refactored
.PHONY: ttu_r3_uaf_to_code_reuse_refactored ttu_r4_illegal_ptr_deref_refactored
.PHONY: ttu_r5_df_switch_refactored

# EOF
