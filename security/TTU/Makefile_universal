#
# Universal BSD Make Compatible Makefile for xBGAS TTU Memory Safety Tests
# Works across different Unix systems
#

# Detect compiler
CC ?= cc
CFLAGS = -g -O2 -Wall -Wextra -std=c99 -I../../runtime
LDFLAGS = -lpthread -lm
COMPILE = $(CC) $(CFLAGS) $(LDFLAGS)

# Output Directory
REPORTDIR = ./reports

# Test Sources (explicitly listed for clarity)
SPATIAL_SOURCES = \
	ttu_s1_free_not_at_start_refactored.c \
	ttu_s2_free_not_on_heap_refactored.c \
	ttu_s3_null_ptr_dereference_refactored.c \
	ttu_s4_oob_read_refactored.c \
	ttu_s5_oob_write_refactored.c

TEMPORAL_SOURCES = \
	ttu_t1_double_free_refactored.c \
	ttu_t2_hm_fake_chunk_malloc_refactored.c \
	ttu_t3_hm_house_of_spirit_refactored.c \
	ttu_t4_hm_p_and_c_chunk_refactored.c \
	ttu_t5_use_after_free_refactored.c \
	ttu_t6_uaf_function_pointer_refactored_fixed.c \
	ttu_t7_uaf_memcpy_refactored.c

REALWORLD_SOURCES = \
	ttu_r1_HeartBleed_refactored.c \
	ttu_r2_dop_refactored.c \
	ttu_r3_uaf_to_code_reuse_refactored.c \
	ttu_r4_illegal_ptr_deref_refactored.c \
	ttu_r5_df_switch_refactored.c

HEAP_SOURCES = \
	ttu_t2_hm_fake_chunk_malloc_refactored.c \
	ttu_t3_hm_house_of_spirit_refactored.c \
	ttu_t4_hm_p_and_c_chunk_refactored.c

# ============================================================================
#                              BUILD TARGETS  
# ============================================================================

all: check-environment spatial temporal realworld
	@echo "===================================================="
	@echo "All TTU refactored tests built successfully!"
	@echo "===================================================="

check-environment:
	@echo "=== Environment Check ==="
	@echo "Compiler: $(CC)"
	@echo "Working directory: `pwd`"
	@echo "Available refactored files:"
	@ls -1 *_refactored*.c 2>/dev/null | wc -l | sed 's/^/  Found: /' || echo "  Found: 0"
	@echo "Runtime directory: `test -d ../../runtime && echo EXISTS || echo MISSING`"
	@mkdir -p $(REPORTDIR)

spatial: check-environment
	@echo "=== Building Spatial Safety Tests ==="
	@for src in $(SPATIAL_SOURCES); do \
		if test -f "$$src"; then \
			target=`echo $$src | sed 's/\.c$$/.exe/'`; \
			echo "Building $$target..."; \
			if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
				echo "  ✓ Built $$target"; \
			else \
				echo "  ✗ Failed to build $$target"; \
				echo "  Error details:"; \
				cat $(REPORTDIR)/build_$$target.log | sed 's/^/    /'; \
				exit 1; \
			fi; \
		else \
			echo "  ⚠ Missing source file: $$src"; \
		fi; \
	done

temporal: check-environment
	@echo "=== Building Temporal Safety Tests ==="
	@for src in $(TEMPORAL_SOURCES); do \
		if test -f "$$src"; then \
			target=`echo $$src | sed 's/\.c$$/.exe/'`; \
			echo "Building $$target..."; \
			if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
				echo "  ✓ Built $$target"; \
			else \
				echo "  ✗ Failed to build $$target"; \
				echo "  Error details:"; \
				cat $(REPORTDIR)/build_$$target.log | sed 's/^/    /'; \
				exit 1; \
			fi; \
		else \
			echo "  ⚠ Missing source file: $$src"; \
		fi; \
	done

realworld: check-environment
	@echo "=== Building Real-World Tests ==="
	@for src in $(REALWORLD_SOURCES); do \
		if test -f "$$src"; then \
			target=`echo $$src | sed 's/\.c$$/.exe/'`; \
			echo "Building $$target..."; \
			if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
				echo "  ✓ Built $$target"; \
			else \
				echo "  ✗ Failed to build $$target"; \
				echo "  Error details:"; \
				cat $(REPORTDIR)/build_$$target.log | sed 's/^/    /'; \
				exit 1; \
			fi; \
		else \
			echo "  ⚠ Missing source file: $$src"; \
		fi; \
	done

heap: check-environment
	@echo "=== Building Heap Manipulation Tests ==="
	@for src in $(HEAP_SOURCES); do \
		if test -f "$$src"; then \
			target=`echo $$src | sed 's/\.c$$/.exe/'`; \
			echo "Building $$target..."; \
			if $(COMPILE) -o $$target $$src > $(REPORTDIR)/build_$$target.log 2>&1; then \
				echo "  ✓ Built $$target"; \
			else \
				echo "  ✗ Failed to build $$target"; \
				echo "  Error details:"; \
				cat $(REPORTDIR)/build_$$target.log | sed 's/^/    /'; \
				exit 1; \
			fi; \
		else \
			echo "  ⚠ Missing source file: $$src"; \
		fi; \
	done

# ============================================================================
#                           INDIVIDUAL TARGETS
# ============================================================================

# Simple individual targets
ttu_s1_free_not_at_start_refactored:
	@$(COMPILE) -o ttu_s1_free_not_at_start_refactored.exe ttu_s1_free_not_at_start_refactored.c

ttu_t1_double_free_refactored:
	@$(COMPILE) -o ttu_t1_double_free_refactored.exe ttu_t1_double_free_refactored.c

ttu_r1_HeartBleed_refactored:
	@$(COMPILE) -o ttu_r1_HeartBleed_refactored.exe ttu_r1_HeartBleed_refactored.c

# ============================================================================
#                              TEST EXECUTION
# ============================================================================

run-spatial: spatial
	@echo "=== Running Spatial Safety Tests ==="
	@for src in $(SPATIAL_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		if test -f "$$target"; then \
			echo "Running $$target..."; \
			./$$target > $(REPORTDIR)/run_$$target.log 2>&1 && \
				echo "  ✓ $$target completed" || echo "  ✗ $$target failed"; \
		fi; \
	done

run-temporal: temporal
	@echo "=== Running Temporal Safety Tests ==="
	@for src in $(TEMPORAL_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		if test -f "$$target"; then \
			echo "Running $$target..."; \
			./$$target > $(REPORTDIR)/run_$$target.log 2>&1 && \
				echo "  ✓ $$target completed" || echo "  ✗ $$target failed"; \
		fi; \
	done

run-realworld: realworld
	@echo "=== Running Real-World Tests ==="
	@for src in $(REALWORLD_SOURCES); do \
		target=`echo $$src | sed 's/\.c$$/.exe/'`; \
		if test -f "$$target"; then \
			echo "Running $$target..."; \
			./$$target > $(REPORTDIR)/run_$$target.log 2>&1 && \
				echo "  ✓ $$target completed" || echo "  ✗ $$target failed"; \
		fi; \
	done

run-all: all
	@echo "========================================================="
	@echo "Running comprehensive TTU security test suite"
	@echo "========================================================="
	@$(MAKE) run-spatial
	@$(MAKE) run-temporal
	@$(MAKE) run-realworld

# ============================================================================
#                              VALIDATION
# ============================================================================

check-files:
	@echo "=== File Check ==="
	@echo "Spatial sources (expected 5):"
	@for src in $(SPATIAL_SOURCES); do \
		test -f "$$src" && echo "  ✓ $$src" || echo "  ✗ $$src (missing)"; \
	done
	@echo "Temporal sources (expected 7):"
	@for src in $(TEMPORAL_SOURCES); do \
		test -f "$$src" && echo "  ✓ $$src" || echo "  ✗ $$src (missing)"; \
	done
	@echo "Real-world sources (expected 5):"
	@for src in $(REALWORLD_SOURCES); do \
		test -f "$$src" && echo "  ✓ $$src" || echo "  ✗ $$src (missing)"; \
	done

compile-test:
	@echo "=== Compilation Test ==="
	@echo "Testing single file compilation..."
	@if test -f "ttu_s1_free_not_at_start_refactored.c"; then \
		echo "Compiling ttu_s1_free_not_at_start_refactored.c..."; \
		$(COMPILE) -o test_compile.exe ttu_s1_free_not_at_start_refactored.c && \
			{ echo "✓ Compilation successful"; rm -f test_compile.exe; } || \
			echo "✗ Compilation failed"; \
	else \
		echo "✗ Test file not found"; \
	fi

# ============================================================================
#                              MAINTENANCE
# ============================================================================

clean:
	@echo "Cleaning generated files..."
	@rm -f *.exe *.o *.core
	@rm -rf $(REPORTDIR)

clean-logs:
	@rm -rf $(REPORTDIR)
	@mkdir -p $(REPORTDIR)

# ============================================================================
#                                 HELP
# ============================================================================

config:
	@echo "=== Build Configuration ==="
	@echo "CC = $(CC)"
	@echo "CFLAGS = $(CFLAGS)"
	@echo "LDFLAGS = $(LDFLAGS)"
	@echo "COMPILE = $(COMPILE)"
	@echo "REPORTDIR = $(REPORTDIR)"
	@echo "PWD = `pwd`"

help:
	@echo "TTU Memory Safety Tests - Universal Build System"
	@echo "==============================================="
	@echo "ENVIRONMENT:"
	@echo "  check-environment - Show build environment"
	@echo "  config           - Show build configuration"
	@echo "  check-files      - Verify source files exist"
	@echo ""
	@echo "BUILD TARGETS:"
	@echo "  all        - Build all refactored tests"
	@echo "  spatial    - Build spatial safety tests (5)"
	@echo "  temporal   - Build temporal safety tests (7)"
	@echo "  realworld  - Build real-world tests (5)"
	@echo "  heap       - Build heap manipulation tests (3)"
	@echo ""
	@echo "TEST TARGETS:"
	@echo "  run-all      - Run all tests"
	@echo "  run-spatial  - Run spatial tests"
	@echo "  run-temporal - Run temporal tests"
	@echo "  run-realworld- Run real-world tests"
	@echo ""
	@echo "VALIDATION:"
	@echo "  compile-test - Test single file compilation"
	@echo ""
	@echo "MAINTENANCE:"
	@echo "  clean      - Remove generated files"
	@echo "  clean-logs - Clean only log files"
	@echo "  help       - Show this help"

# Mark all targets as PHONY that don't create files
.PHONY: all check-environment spatial temporal realworld heap
.PHONY: run-spatial run-temporal run-realworld run-all
.PHONY: check-files compile-test clean clean-logs config help
.PHONY: ttu_s1_free_not_at_start_refactored ttu_t1_double_free_refactored
.PHONY: ttu_r1_HeartBleed_refactored

# EOF
