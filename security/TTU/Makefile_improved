#
# Makefile for xBGAS Memory Safety Tests (Texas Tech University)
#
# Copyright (C) 2024 Texas Tech University
# All Rights Reserved
#
# This Makefile builds the comprehensive memory safety test suite
# for the xBGAS runtime on CHERI-Morello architecture.
#

# ============================================================================
#                              CONFIGURATION
# ============================================================================

# Compiler Configuration
CC = cc
# Alternative compiler for CHERI-Morello
# CC = /usr/local64/llvm-morello/bin/clang

# Compiler Flags
CFLAGS = -g -O2 -Wall -Wextra -std=c99
LDFLAGS = -lpthread -lm

# Include Paths
INCLUDES = -I../../runtime

# Assembly Sources
ASM_SOURCES = ../../runtime/xbMrtime_api_asm.s

# Complete Compilation Command
COMPILE = $(CC) $(CFLAGS) $(INCLUDES) $(LDFLAGS) $(ASM_SOURCES)

# Output Directory
OUTDIR = ./bin
OBJDIR = ./obj

# ============================================================================
#                              SOURCE FILES
# ============================================================================

# Spatial Safety Tests
SPATIAL_SOURCES = \
	ttu_s1_free_not_at_start.c \
	ttu_s2_free_not_on_heap.c \
	ttu_s3_null_ptr_dereference.c \
	ttu_s4_oob_read.c \
	ttu_s5_oob_write.c

# Temporal Safety Tests
TEMPORAL_SOURCES = \
	ttu_t1_double_free.c \
	ttu_t2_hm_fake_chunk_malloc.c \
	ttu_t3_hm_house_of_spirit.c \
	ttu_t4_hm_p_and_c_chunk.c \
	ttu_t5_use_after_free.c \
	ttu_t6_uaf_function_pointer.c \
	ttu_t7_uaf_memcpy.c

# Real-world Vulnerability Tests
REALWORLD_SOURCES = \
	ttu_r1_HeartBleed.c \
	ttu_r2_dop.c \
	ttu_r3_uaf_to_code_reuse.c \
	ttu_r4_illegal_ptr_deref.c \
	ttu_r5_df_switch.c

# Refactored Test Examples
REFACTORED_SOURCES = \
	ttu_s4_oob_read_refactored.c

# All Sources
ALL_SOURCES = $(SPATIAL_SOURCES) $(TEMPORAL_SOURCES) $(REALWORLD_SOURCES) $(REFACTORED_SOURCES)

# ============================================================================
#                              TARGET DEFINITIONS
# ============================================================================

# Spatial Safety Executables
SPATIAL_TARGETS = $(SPATIAL_SOURCES:.c=.exe)

# Temporal Safety Executables
TEMPORAL_TARGETS = $(TEMPORAL_SOURCES:.c=.exe)

# Real-world Vulnerability Executables
REALWORLD_TARGETS = $(REALWORLD_SOURCES:.c=.exe)

# Refactored Examples
REFACTORED_TARGETS = $(REFACTORED_SOURCES:.c=.exe)

# All Executables
ALL_TARGETS = $(ALL_SOURCES:.c=.exe)

# ============================================================================
#                              BUILD RULES
# ============================================================================

# Default target
.PHONY: all
all: directories $(ALL_TARGETS)
	@echo "===================================================="
	@echo "All TTU memory safety tests built successfully!"
	@echo "===================================================="
	@echo "Spatial Safety Tests: $(words $(SPATIAL_TARGETS)) files"
	@echo "Temporal Safety Tests: $(words $(TEMPORAL_TARGETS)) files"
	@echo "Real-world Tests: $(words $(REALWORLD_TARGETS)) files"
	@echo "Refactored Examples: $(words $(REFACTORED_TARGETS)) files"
	@echo "===================================================="

# Create necessary directories
.PHONY: directories
directories:
	@mkdir -p $(OUTDIR) $(OBJDIR)

# ============================================================================
#                           CATEGORY-SPECIFIC TARGETS
# ============================================================================

# Build only spatial safety tests
.PHONY: spatial
spatial: directories $(SPATIAL_TARGETS)
	@echo "Spatial safety tests built successfully!"

# Build only temporal safety tests  
.PHONY: temporal
temporal: directories $(TEMPORAL_TARGETS)
	@echo "Temporal safety tests built successfully!"

# Build only real-world vulnerability tests
.PHONY: realworld
realworld: directories $(REALWORLD_TARGETS)
	@echo "Real-world vulnerability tests built successfully!"

# Build only heap manipulation tests
.PHONY: heap
heap: directories ttu_t2_hm_fake_chunk_malloc.exe ttu_t3_hm_house_of_spirit.exe ttu_t4_hm_p_and_c_chunk.exe
	@echo "Heap manipulation tests built successfully!"

# Build refactored examples
.PHONY: refactored
refactored: directories $(REFACTORED_TARGETS)
	@echo "Refactored examples built successfully!"

# ============================================================================
#                           COMPILATION RULES
# ============================================================================

# Generic rule for building executables
%.exe: %.c
	@echo "Building $@..."
	$(COMPILE) -o $@ $<
	@echo "Successfully built $@"

# ============================================================================
#                              EXECUTION TARGETS
# ============================================================================

# Run all spatial safety tests
.PHONY: run-spatial
run-spatial: spatial
	@echo "===================================================="
	@echo "Running Spatial Safety Tests"
	@echo "===================================================="
	@for test in $(SPATIAL_TARGETS); do \
		echo "Running $$test..."; \
		./$$test || echo "Test $$test failed"; \
		echo "----------------------------------------------------"; \
	done

# Run all temporal safety tests
.PHONY: run-temporal
run-temporal: temporal
	@echo "===================================================="
	@echo "Running Temporal Safety Tests"
	@echo "===================================================="
	@for test in $(TEMPORAL_TARGETS); do \
		echo "Running $$test..."; \
		./$$test || echo "Test $$test failed"; \
		echo "----------------------------------------------------"; \
	done

# Run all real-world vulnerability tests
.PHONY: run-realworld
run-realworld: realworld
	@echo "===================================================="
	@echo "Running Real-world Vulnerability Tests"
	@echo "===================================================="
	@for test in $(REALWORLD_TARGETS); do \
		echo "Running $$test..."; \
		./$$test || echo "Test $$test failed"; \
		echo "----------------------------------------------------"; \
	done

# Run all tests
.PHONY: run-all
run-all: all
	@echo "===================================================="
	@echo "Running All TTU Memory Safety Tests"
	@echo "===================================================="
	@$(MAKE) run-spatial
	@$(MAKE) run-temporal  
	@$(MAKE) run-realworld

# ============================================================================
#                              ANALYSIS TARGETS
# ============================================================================

# Analyze test results and generate summary
.PHONY: analyze
analyze: all
	@echo "===================================================="
	@echo "Memory Safety Test Analysis"
	@echo "===================================================="
	@echo "Test suite contains $(words $(ALL_TARGETS)) total tests:"
	@echo "  - Spatial Safety: $(words $(SPATIAL_TARGETS)) tests"
	@echo "  - Temporal Safety: $(words $(TEMPORAL_TARGETS)) tests"
	@echo "  - Real-world Vulns: $(words $(REALWORLD_TARGETS)) tests"
	@echo "===================================================="

# Check for memory leaks using valgrind (if available)
.PHONY: memcheck
memcheck: all
	@echo "Running memory leak analysis..."
	@for test in $(ALL_TARGETS); do \
		if command -v valgrind >/dev/null 2>&1; then \
			echo "Checking $$test for memory leaks..."; \
			valgrind --leak-check=full --error-exitcode=1 ./$$test > /dev/null 2>&1 || \
			echo "Memory issues detected in $$test"; \
		else \
			echo "Valgrind not available, skipping memory check for $$test"; \
		fi; \
	done

# ============================================================================
#                              MAINTENANCE TARGETS
# ============================================================================

# Clean all generated files
.PHONY: clean
clean:
	@echo "Cleaning up generated files..."
	@rm -f *.exe *.o *.core
	@rm -rf $(OUTDIR) $(OBJDIR)
	@echo "Clean completed."

# Clean and rebuild everything
.PHONY: rebuild
rebuild: clean all

# Install tests to system location (requires root)
.PHONY: install
install: all
	@echo "Installing TTU memory safety tests..."
	@sudo mkdir -p /usr/local/bin/xbgas-tests
	@sudo cp *.exe /usr/local/bin/xbgas-tests/
	@echo "Tests installed to /usr/local/bin/xbgas-tests/"

# ============================================================================
#                              HELP TARGET
# ============================================================================

.PHONY: help
help:
	@echo "===================================================="
	@echo "xBGAS Memory Safety Tests - Build System Help"
	@echo "===================================================="
	@echo "Available targets:"
	@echo ""
	@echo "BUILD TARGETS:"
	@echo "  all         - Build all tests (default)"
	@echo "  spatial     - Build spatial safety tests only"
	@echo "  temporal    - Build temporal safety tests only"
	@echo "  realworld   - Build real-world vulnerability tests only"
	@echo "  heap        - Build heap manipulation tests only"
	@echo "  refactored  - Build refactored examples only"
	@echo ""
	@echo "EXECUTION TARGETS:"
	@echo "  run-all     - Run all tests"
	@echo "  run-spatial - Run spatial safety tests"
	@echo "  run-temporal- Run temporal safety tests"
	@echo "  run-realworld- Run real-world vulnerability tests"
	@echo ""
	@echo "ANALYSIS TARGETS:"
	@echo "  analyze     - Analyze test suite composition"
	@echo "  memcheck    - Check for memory leaks (requires valgrind)"
	@echo ""
	@echo "MAINTENANCE TARGETS:"
	@echo "  clean       - Remove all generated files"
	@echo "  rebuild     - Clean and rebuild everything"
	@echo "  install     - Install tests system-wide (requires root)"
	@echo "  help        - Show this help message"
	@echo ""
	@echo "CONFIGURATION:"
	@echo "  CC=$(CC)"
	@echo "  CFLAGS=$(CFLAGS)"
	@echo "  LDFLAGS=$(LDFLAGS)"
	@echo "===================================================="

# ============================================================================
#                              LEGACY COMPATIBILITY
# ============================================================================

# Legacy target names for backward compatibility
.PHONY: runS runT runR runA

runS: run-spatial
runT: run-temporal  
runR: run-realworld
runA: run-all

# Individual test targets for backward compatibility
.PHONY: ttuS1 ttuS2 ttuS3 ttuS4 ttuS5 ttuT1 ttuT2 ttuT3 ttuT4 ttuT5 ttuT6 ttuT7 ttuR1 ttuR2 ttuR3 ttuR4 ttuR5

ttuS1: ttu_s1_free_not_at_start.exe
ttuS2: ttu_s2_free_not_on_heap.exe
ttuS3: ttu_s3_null_ptr_dereference.exe
ttuS4: ttu_s4_oob_read.exe
ttuS5: ttu_s5_oob_write.exe

ttuT1: ttu_t1_double_free.exe
ttuT2: ttu_t2_hm_fake_chunk_malloc.exe
ttuT3: ttu_t3_hm_house_of_spirit.exe
ttuT4: ttu_t4_hm_p_and_c_chunk.exe
ttuT5: ttu_t5_use_after_free.exe
ttuT6: ttu_t6_uaf_function_pointer.exe
ttuT7: ttu_t7_uaf_memcpy.exe

ttuR1: ttu_r1_HeartBleed.exe
ttuR2: ttu_r2_dop.exe
ttuR3: ttu_r3_uaf_to_code_reuse.exe
ttuR4: ttu_r4_illegal_ptr_deref.exe
ttuR5: ttu_r5_df_switch.exe

# EOF
