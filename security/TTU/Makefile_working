#
# Working Makefile for xBGAS TTU Memory Safety Tests
#

# Basic Configuration
CC = cc
CFLAGS = -g -O2 -Wall -Wextra -std=c99 -I../../runtime
LDFLAGS = -lpthread -lm

# Simple compilation command (without assembly for now)
COMPILE = $(CC) $(CFLAGS) $(LDFLAGS)

# Output Directory
REPORTDIR = ./reports

# Refactored Test Sources by Category
SPATIAL_SOURCES = \
	ttu_s1_free_not_at_start_refactored.c \
	ttu_s2_free_not_on_heap_refactored.c \
	ttu_s3_null_ptr_dereference_refactored.c \
	ttu_s4_oob_read_refactored.c \
	ttu_s5_oob_write_refactored.c

TEMPORAL_SOURCES = \
	ttu_t1_double_free_refactored.c \
	ttu_t2_hm_fake_chunk_malloc_refactored.c \
	ttu_t3_hm_house_of_spirit_refactored.c \
	ttu_t4_hm_p_and_c_chunk_refactored.c \
	ttu_t5_use_after_free_refactored.c \
	ttu_t6_uaf_function_pointer_refactored_fixed.c \
	ttu_t7_uaf_memcpy_refactored.c

REALWORLD_SOURCES = \
	ttu_r1_HeartBleed_refactored.c \
	ttu_r2_dop_refactored.c \
	ttu_r3_uaf_to_code_reuse_refactored.c \
	ttu_r4_illegal_ptr_deref_refactored.c \
	ttu_r5_df_switch_refactored.c

HEAP_SOURCES = \
	ttu_t2_hm_fake_chunk_malloc_refactored.c \
	ttu_t3_hm_house_of_spirit_refactored.c \
	ttu_t4_hm_p_and_c_chunk_refactored.c

ALL_SOURCES = $(SPATIAL_SOURCES) $(TEMPORAL_SOURCES) $(REALWORLD_SOURCES)

# Executable targets
SPATIAL_TARGETS = $(SPATIAL_SOURCES:.c=.exe)
TEMPORAL_TARGETS = $(TEMPORAL_SOURCES:.c=.exe)
REALWORLD_TARGETS = $(REALWORLD_SOURCES:.c=.exe)
HEAP_TARGETS = $(HEAP_SOURCES:.c=.exe)
ALL_TARGETS = $(ALL_SOURCES:.c=.exe)

# ============================================================================
#                              BUILD TARGETS
# ============================================================================

# Default: build all tests
.PHONY: all
all: directories $(ALL_TARGETS)
	@echo "===================================================="
	@echo "All TTU refactored tests built successfully!"
	@echo "Spatial: $(words $(SPATIAL_TARGETS)) tests"
	@echo "Temporal: $(words $(TEMPORAL_TARGETS)) tests"
	@echo "Real-world: $(words $(REALWORLD_TARGETS)) tests"
	@echo "===================================================="

# Create directories
.PHONY: directories
directories:
	@mkdir -p $(REPORTDIR)

# Build by category
.PHONY: spatial temporal realworld heap
spatial: directories $(SPATIAL_TARGETS)
	@echo "Spatial safety tests built: $(SPATIAL_TARGETS)"

temporal: directories $(TEMPORAL_TARGETS)
	@echo "Temporal safety tests built: $(TEMPORAL_TARGETS)"

realworld: directories $(REALWORLD_TARGETS)
	@echo "Real-world tests built: $(REALWORLD_TARGETS)"

heap: directories $(HEAP_TARGETS)
	@echo "Heap manipulation tests built: $(HEAP_TARGETS)"

# ============================================================================
#                           COMPILATION RULE
# ============================================================================

%.exe: %.c
	@echo "Building $@..."
	@$(COMPILE) -o $@ $< > $(REPORTDIR)/build_$*.log 2>&1 && \
		echo "✓ Built $@" || \
		{ echo "✗ Failed to build $@"; cat $(REPORTDIR)/build_$*.log; exit 1; }

# ============================================================================
#                           TEST EXECUTION
# ============================================================================

.PHONY: test-spatial test-temporal test-realworld test-heap test-all
test-spatial: spatial
	@echo "Running spatial safety tests..."
	@for test in $(SPATIAL_TARGETS); do \
		echo "Running $$test..."; \
		timeout 30s ./$$test > $(REPORTDIR)/$$test.output 2>&1 && \
			echo "✓ PASSED: $$test" || echo "✗ FAILED: $$test"; \
	done

test-temporal: temporal
	@echo "Running temporal safety tests..."
	@for test in $(TEMPORAL_TARGETS); do \
		echo "Running $$test..."; \
		timeout 30s ./$$test > $(REPORTDIR)/$$test.output 2>&1 && \
			echo "✓ PASSED: $$test" || echo "✗ FAILED: $$test"; \
	done

test-realworld: realworld
	@echo "Running real-world vulnerability tests..."
	@for test in $(REALWORLD_TARGETS); do \
		echo "Running $$test..."; \
		timeout 30s ./$$test > $(REPORTDIR)/$$test.output 2>&1 && \
			echo "✓ PASSED: $$test" || echo "✗ FAILED: $$test"; \
	done

test-heap: heap
	@echo "Running heap manipulation tests..."
	@for test in $(HEAP_TARGETS); do \
		echo "Running $$test..."; \
		timeout 30s ./$$test > $(REPORTDIR)/$$test.output 2>&1 && \
			echo "✓ PASSED: $$test" || echo "✗ FAILED: $$test"; \
	done

test-all: all
	@echo "========================================================="
	@echo "Running comprehensive TTU security test suite"
	@echo "========================================================="
	@$(MAKE) test-spatial
	@$(MAKE) test-temporal
	@$(MAKE) test-realworld

# ============================================================================
#                              VALIDATION
# ============================================================================

.PHONY: validate syntax-check
validate: directories
	@echo "Validating all test builds..."
	@for src in $(ALL_SOURCES); do \
		target=$${src%.c}.exe; \
		echo "Validating $$src..."; \
		if $(COMPILE) -o $$target $$src > $(REPORTDIR)/validate_$$target.log 2>&1; then \
			echo "✓ $$src compiles"; \
			rm -f $$target; \
		else \
			echo "✗ $$src failed"; \
		fi; \
	done

syntax-check:
	@echo "Checking syntax of all sources..."
	@for src in $(ALL_SOURCES); do \
		if $(CC) $(CFLAGS) -fsyntax-only $$src 2>/dev/null; then \
			echo "✓ $$src syntax OK"; \
		else \
			echo "✗ $$src syntax errors"; \
		fi; \
	done

# ============================================================================
#                              MAINTENANCE
# ============================================================================

.PHONY: clean clean-reports
clean:
	@echo "Cleaning generated files..."
	@rm -f *.exe *.o *.core
	@rm -rf $(REPORTDIR)

clean-reports:
	@rm -rf $(REPORTDIR)
	@mkdir -p $(REPORTDIR)

# ============================================================================
#                                 HELP
# ============================================================================

.PHONY: help
help:
	@echo "TTU Memory Safety Tests - Build System"
	@echo "======================================"
	@echo "BUILD TARGETS:"
	@echo "  all        - Build all refactored tests"
	@echo "  spatial    - Build spatial safety tests"
	@echo "  temporal   - Build temporal safety tests"
	@echo "  realworld  - Build real-world tests"
	@echo "  heap       - Build heap manipulation tests"
	@echo ""
	@echo "TEST TARGETS:"
	@echo "  test-all      - Run all tests"
	@echo "  test-spatial  - Run spatial tests"
	@echo "  test-temporal - Run temporal tests"
	@echo "  test-realworld- Run real-world tests"
	@echo "  test-heap     - Run heap tests"
	@echo ""
	@echo "VALIDATION:"
	@echo "  validate      - Validate all builds"
	@echo "  syntax-check  - Check source syntax"
	@echo ""
	@echo "MAINTENANCE:"
	@echo "  clean         - Remove generated files"
	@echo "  clean-reports - Clean only reports"
	@echo "  help          - Show this help"

# EOF
